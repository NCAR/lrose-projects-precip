/**********************************************************************
 * TDRP params for LtgSpdb2Mdv
 **********************************************************************/

//======================================================================
//
// Program name: LtgSpdb2Mdv.
//
// LtgSpdb2Mdv reads SPDB lightning stroke data, computes a rate grid 
//   and stores this out in Mdv format.
//
//======================================================================
 
//======================================================================
//
// DEBUG AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
//
// Used for registration with procmap.
//
//
// Type: string
//

instance = "relampago";

///////////// mode ////////////////////////////////////
//
// Operating mode.
//
// In REALTIME mode, the program either (a) if use_spdb_ldata_info is 
//   false, creates an output file every trigger_interval seconds, or (b) 
//   if use_spdb_ldata_info is true, waits for the latest data info to 
//   update and then creates an output file. In the latter case (b), if no 
//   new data arrives within the trigger interval, the program runs 
//   anyway.
// In ARCHIVE mode, it creates an output file every trigger_interval 
//   seconds between the start time and the end time.
// In TIME_LIST mode, it creates an output file for every data time in 
//   the trigger_url between the start and end times.
//
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     TIME_LIST
//

mode = REALTIME;

///////////// trigger_url /////////////////////////////
//
// URL for triggering in TIME_LIST mode.
//
//
// Type: string
//

trigger_url = "relampago/spdb/ltg/glm";

///////////// realtime_trigger_url ////////////////////
//
// URL for triggering in REALTIME mode.
//
// If set to an empty string, input_url is used.
//
//
// Type: string
//

realtime_trigger_url = "";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_url ///////////////////////////////
//
// URL for input SPDB data.
//
// Ltg stroke data is stored in SPDB format.
//
//
// Type: string
//

input_url = "relampago/spdb/ltg/glm";

///////////// spdb_ltg_id /////////////////////////////
//
// SPDB product id for the lightning data.
//
// Use 200 for regular RAL lightning data.
// Use 204 for TRMM lightning group data.
// Use 60 for GenPt data. Note that when using GenPt data only the "ltg" 
//   location is known so the amplitude is assumed to be 0.
// Other specialized lightning formats may have different numbers.
//
//
// Type: int
//

spdb_ltg_id = 200;

///////////// watch_latest_data_info //////////////////
//
// Option to use the arrival of spdb ltg data as a trigger.
//
// If this is set, an output MDV file will be created whenever the 
//   latest_data_info file in the database_dir changes. This option is 
//   only in effect for REALTIME mode.
//
//
// Type: boolean
//

watch_latest_data_info = FALSE;

///////////// max_realtime_valid_age //////////////////
//
// Maximum valid age in seconds for realtime input data.
//
// This option is only in effect for REALTIME mode. Data must be younger 
//   than max_valid_age to be used.
//
//
// Type: int
//

max_realtime_valid_age = 3600;

///////////// trigger_interval ////////////////////////
//
// Interval at which processing is triggered.
//
// Number of seconds between grid creations. In ARCHIVE mode determines 
//   output grid frequency. In REALTIME mode if no new data arrives within 
//   this interval, a grid is produced.
//
// Minimum val: 5
//
// Type: int
//

trigger_interval = 300;

///////////// processing_delay ////////////////////////
//
// processing delay in seconds.
//
// The number of seconds to wait before processing an input file. This 
//   delay allows activity on the file to finish before we start reading 
//   it.
//
// Minimum val: 0
//
// Type: int
//

processing_delay = 0;

//======================================================================
//
// ALGORITHM PARAMETERS.
//
//======================================================================
 
///////////// rate_compute_period /////////////////////
//
// Number of seconds prior to the trigger time used for gathering ltg 
//   data.
//
// Data for this period is retrieved from the data base for use in 
//   computing the rate.
//
//
// Type: int
//

rate_compute_period = 300;

///////////// rate_extend_period //////////////////////
//
// Number of seconds after the trigger time used for gathering ltg data.
//
// This should generally be set to 0 for realtime data.
//
//
// Type: int
//

rate_extend_period = 0;

///////////// realtime_data_lag_time //////////////////
//
// Realtime input data lag time (secs).
//
// Number of seconds between data receipt and grid generation.  This is 
//   the time between the data generation and the valid time. This 
//   parameter is only used in REALTIME_MODE.
//
// Minimum val: 0
//
// Type: int
//

realtime_data_lag_time = 0;

///////////// ltg_radius //////////////////////////////
//
// Lightning effect radius in grid units.
//
// Size of area affected by a single lightning strike.  If set to 0, 
//   only the grid square in which the lightning strike occurred will 
//   include the strike.  If set higher, any grid square whose center lies 
//   in the circle of the given radius from the center of the grid square 
//   in which the strike occurred will be affected by the strike (its 
//   total will be incremented).
//
// Minimum val: 0
//
// Type: int
//

ltg_radius = 5;

///////////// polarity_flag ///////////////////////////
//
// Polarity flag.
//
// Indicates the polarity of the lightning strikes to be included in the 
//   resulting grids.
//
//
// Type: enum
// Options:
//     POLAR_POS
//     POLAR_NEG
//     POLAR_BOTH
//

polarity_flag = POLAR_BOTH;

///////////// min_amplitude ///////////////////////////
//
// minimum amplitude.
//
// Minimum amplitude for strikes to be included in the resulting grids. 
//   If less than zero, no minimum amplitude is used.
//
//
// Type: int
//

min_amplitude = -1;

///////////// max_amplitude ///////////////////////////
//
// maximum amplitude.
//
// Maximum amplitude for strikes to be included in the resulting grids. 
//   If less than zero, no maximum amplitude is used.
//
//
// Type: int
//

max_amplitude = -1;

//======================================================================
//
// OUTPUT FILE.
//
//======================================================================
 
///////////// output_url //////////////////////////////
//
// URL for output data.
//
// Mdv data will be written to this URL.
//
//
// Type: string
//

output_url = "relampago/mdv/ltg/glm";

///////////// time_stamp_flag /////////////////////////
//
// Flag indicating how to compute the output data time.
//
// If BEGIN_TIME, the centroid_time is set to the start time of the 
//   input data. Similarly, for END_TIME the centroid is set to the end 
//   time and MID_TIME the average time.
//
//
// Type: enum
// Options:
//     BEGIN_TIME
//     MID_TIME
//     END_TIME
//

time_stamp_flag = END_TIME;

///////////// create_empty_files //////////////////////
//
// Flag indicating whether to create an output file if no strikes were 
//   found in the current time period.
//
//
// Type: boolean
//

create_empty_files = FALSE;

///////////// use_missing_for_no_strikes //////////////
//
// Flag indicating whether to flag grid squares with no lightning 
//   strikes as missing. If set to false, grid squares with no lightning 
//   strikes will have a data value of 0.0.
//
//
// Type: boolean
//

use_missing_for_no_strikes = TRUE;

///////////// data_set_info ///////////////////////////
//
// Data set info.
//
// This is placed in the MDV master header for documentation purposes.
//
//
// Type: string
//

data_set_info = "This MDV file was created by LtgSpdb2Mdv.";

///////////// data_set_name ///////////////////////////
//
// Data set name.
//
// This is placed in the MDV master header for documentation purposes.
//
//
// Type: string
//

data_set_name = "Lightning rate grid.";

///////////// data_set_source /////////////////////////
//
// Data set source details.
//
// This is placed in the MDV master header for documentation purposes.
//
//
// Type: string
//

data_set_source = "GOES16 GLM.";

///////////// compression_type ////////////////////////
//
// Output file compression type.
//
//
// Type: enum
// Options:
//     COMPRESSION_ASIS
//     COMPRESSION_NONE
//     COMPRESSION_RLE
//     COMPRESSION_LZO
//     COMPRESSION_ZLIB
//     COMPRESSION_BZIP
//     COMPRESSION_GZIP
//

compression_type = COMPRESSION_ZLIB;

///////////// encoding_type ///////////////////////////
//
// Output file encoding type.
//
//
// Type: enum
// Options:
//     ENCODING_ASIS
//     ENCODING_INT8
//     ENCODING_INT16
//     ENCODING_FLOAT32
//

encoding_type = ENCODING_INT16;

///////////// output_scaling_info /////////////////////
//
// Options for user defined scale and bias.
//
// Only applies if ENCODING type is INT8 or INT16.
// If SpecifyScaling is true then the following scale and bias values 
//   will be used. If false rounded dynamic scaling is applied.
//
//
// Type: struct
//   typedef struct {
//      boolean SpecifyScaling;
//      double scale;
//      double bias;
//   }
//
//

output_scaling_info = {
    SpecifyScaling = FALSE,
    scale = 0.5,
    bias = -32
};

//======================================================================
//
// OUTPUT GRID.
//
//======================================================================
 
///////////// output_projection ///////////////////////
//
// Projection for Mdv output data.
//
//
// Type: enum
// Options:
//     PROJ_LATLON
//     PROJ_LAMBERT_CONF
//     PROJ_FLAT
//

output_projection = PROJ_LATLON;

///////////// output_grid /////////////////////////////
//
// Grid parameters for output file.
//
// These params apply to all projection types.
//
//
// Type: struct
//   typedef struct {
//      int nx;
//      int ny;
//      double minx;
//      double miny;
//      double dx;
//      double dy;
//   }
//
//

output_grid = {
    nx = 1500,
    ny = 1250,
    minx = -80,
    miny = -45,
    dx = 0.02,
    dy = 0.02
};

///////////// grid_origin_lat /////////////////////////
//
// Output grid origin latitude.
//
// This applies only to PROJ_FLAT and PROJ_LAMBERT_CONF projections.
//
//
// Type: double
//

grid_origin_lat = 0;

///////////// grid_origin_lon /////////////////////////
//
// Output grid origin longitude.
//
// This applies only to PROJ_FLAT and PROJ_LAMBERT_CONF projections.
//
//
// Type: double
//

grid_origin_lon = 0;

///////////// grid_lat1 ///////////////////////////////
//
// Output grid reference latitude 1.
//
// This applies only to PROJ_LAMBERT_CONF projections.
//
//
// Type: double
//

grid_lat1 = 20;

///////////// grid_lat2 ///////////////////////////////
//
// Output grid reference latitude 2.
//
// This applies only to PROJ_LAMBERT_CONF projections.
//
//
// Type: double
//

grid_lat2 = 60;

//======================================================================
//
// RATE FIELD.
//
//======================================================================
 
///////////// rate_field_name_long ////////////////////
//
// Long field name for rate grid.
//
// This is placed in the MDV field header.
//
//
// Type: string
//

rate_field_name_long = "Gridded Lightning Data";

///////////// rate_field_name /////////////////////////
//
// Field name for rate grid.
//
// This is placed in the MDV field header.
//
//
// Type: string
//

rate_field_name = "Ltg_Strikes";

//======================================================================
//
// DISTANCE FIELD.
//
//======================================================================
 
///////////// add_distance_field //////////////////////
//
// Add shorest distance to strike field.
//
// This controls the addition of lightning strike distance field. The 
//   field contains the distance to the closest strike from each grid 
//   point. The units are kilometers.
//
//
// Type: boolean
//

add_distance_field = FALSE;

///////////// distance_field_name_long ////////////////
//
// Long field name for distance grid.
//
// This is placed in the MDV field header.
//
//
// Type: string
//

distance_field_name_long = "Distance to lightning strike";

///////////// distance_field_name /////////////////////
//
// Field name for distance grid.
//
// This is placed in the MDV field header.
//
//
// Type: string
//

distance_field_name = "Ltg_Distance";

///////////// max_strike_radius ///////////////////////
//
// Maximum radius/distance to lightning strike.
//
// The units are kilometers.
//
//
// Type: double
//

max_strike_radius = 50;

//======================================================================
//
// DERIVED FIELD.
//
//======================================================================
 
///////////// add_derived_field ///////////////////////
//
// Add field derived from the rate data.
//
// This allows you to create a field which interprets the lightning data 
//   rate as a different physical quantity. For example, you might 
//   interpret rate as radar reflectivity, DBZ.
//
//
// Type: boolean
//

add_derived_field = TRUE;

///////////// ltg_factors /////////////////////////////
//
// lightning factor table.
//
// This table gives the step function used to derive values from the 
//   lightning rate. When assigning a data value, the program will step 
//   through this table in order and assign the value for the first entry 
//   where the actual number of strikes is >= to num_strikes but < 
//   num_strikes for the next entry.
//
//
// Type: struct
//   typedef struct {
//      long num_strikes;
//      double ltg_value;
//   }
//
// 1D array - variable length.
//

ltg_factors = {
  {
    num_strikes = 0,
    ltg_value = 0
  }
  ,
  {
    num_strikes = 1,
    ltg_value = 20
  }
  ,
  {
    num_strikes = 2,
    ltg_value = 40
  }
  ,
  {
    num_strikes = 3,
    ltg_value = 50
  }
};

///////////// derived_field_name //////////////////////
//
// Field name for derived data.
//
//
// Type: string
//

derived_field_name = "DBZ";

///////////// derived_field_name_long /////////////////
//
// Long field name for derived data.
//
//
// Type: string
//

derived_field_name_long = "estimated_radar_reflectivity_from_lightning";

///////////// derived_field_units /////////////////////
//
// Units for derived data.
//
//
// Type: string
//

derived_field_units = "dBZ";

