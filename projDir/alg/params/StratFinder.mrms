/**********************************************************************
 * TDRP params for StratFinder
 **********************************************************************/

//======================================================================
//
// Program name: StratFinder.
//
// StratFinder finds stratiform/convective regions within a Cartesian 
//   radar volume.
//
//======================================================================
 
//======================================================================
//
// PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
//
// Used for registration with procmap.
//
//
// Type: string
//

instance = "mrms";

///////////// mode ////////////////////////////////////
//
// Operating mode.
//
// In REALTIME mode, the program waits for a new input file. In ARCHIVE 
//   mode, it moves through the data between the start and end times set 
//   on the command line. In FILELIST mode, it moves through the list of 
//   file names specified on the command line.
//
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     FILELIST
//

mode = REALTIME;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_url ///////////////////////////////
//
// URL for input data.
//
// This is used in REALTIME and ARCHIVE modes only. In FILELIST mode, 
//   the file paths are specified on the command line.
//
//
// Type: string
//

input_url = "$(DATA_DIR)/$(project)/mdv/radarCart/mrms_mosaic";

///////////// dbz_field_name //////////////////////////
//
// dBZ field name in input MDV files.
//
//
// Type: string
//

dbz_field_name = "DBZ";

//======================================================================
//
// ALGORITHM PARAMETERS.
//
//======================================================================
 
///////////// min_valid_height ////////////////////////
//
// Min height used in analysis (km).
//
// Only data at or above this altitude is used.
//
//
// Type: double
//

min_valid_height = 1.5;

///////////// max_valid_height ////////////////////////
//
// Max height used in analysis (km).
//
// Only data at or below this altitude is used.
//
//
// Type: double
//

max_valid_height = 25;

///////////// min_valid_dbz ///////////////////////////
//
// Minimum reflectivity threshold for this analysis (dBZ).
//
// Reflectivity below this threshold is set to missing.
//
//
// Type: double
//

min_valid_dbz = 10;

///////////// dbz_threshold_for_definite_convection ///
//
// Reflectivity value that indicates definite convection.
//
// If the reflectivity exceeds this value at a point, we assume 
//   convection is definitely active at that point. To use this, we first 
//   compute the column maximum reflectivity. If the column max dbz at a 
//   point exceeds this threshold, then we flag that point as convective.
//
//
// Type: double
//

dbz_threshold_for_definite_convection = 53;

///////////// convective_radius_km ////////////////////
//
// Radius of convective influence (km).
//
// Given definite convection at a point (see above), we set all points 
//   within this radius to be convective.
//
//
// Type: double
//

convective_radius_km = 5;

//======================================================================
//
// COMPUTING REFLECTIVITY TEXTURE.
//
//======================================================================
 
///////////// texture_radius_km ///////////////////////
//
// Radius for texture analysis (km).
//
// We determine the reflectivity 'texture' at a point by computing the 
//   standard deviation of the square of the reflectivity, for all grid 
//   points within this radius of the central point. We then compute the 
//   square root of that sdev.
//
//
// Type: double
//

texture_radius_km = 7;

///////////// min_valid_fraction_for_texture //////////
//
// Minimum fraction of surroundingpoints for texture computations.
//
// For a valid computation of texture, we require at least this fraction 
//   of points around the central point to have reflectivity in excess of 
//   min_valid_dbz.
//
//
// Type: double
//

min_valid_fraction_for_texture = 0.33;

///////////// min_texture_for_convection //////////////
//
// Minimum texture for convection at a point.
//
// If the texture at a point exceeds this value, we set the convective 
//   flag at this point. We then expand the convective influence around 
//   the point using convetive_radius_km.
//
//
// Type: double
//

min_texture_for_convection = 15;

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// output_url //////////////////////////////
//
// Output URL.
//
// Output files are written to this URL.
//
//
// Type: string
//

output_url = "$(DATA_DIR)/$(project)/mdv/conv_strat/mrms";

///////////// write_partition_field ///////////////////
//
// Option to write out partition field.
//
//
// Type: boolean
//

write_partition_field = TRUE;

///////////// partition_field_name ////////////////////
//
// Name of convective / stratiform partition field.
//
//
// Type: string
//

partition_field_name = "ConvStrat";

///////////// write_convective_dbz ////////////////////
//
// Option to write out convective dbz field.
//
//
// Type: boolean
//

write_convective_dbz = TRUE;

///////////// convective_dbz_field_name ///////////////
//
// Name of convective dbz field.
//
//
// Type: string
//

convective_dbz_field_name = "DbzConv";

///////////// convert_convective_dbz_to_column_max ////
//
// Option to convert convective dbz field to col max before writing.
//
//
// Type: boolean
//

convert_convective_dbz_to_column_max = FALSE;

///////////// write_stratiform_dbz ////////////////////
//
// Option to write out conveective dbz field.
//
//
// Type: boolean
//

write_stratiform_dbz = FALSE;

///////////// stratiform_dbz_field_name ///////////////
//
// Name of convective dbz field.
//
//
// Type: string
//

stratiform_dbz_field_name = "DbzStrat";

///////////// convert_stratiform_dbz_to_column_max ////
//
// Option to convert stratiform dbz field to col max before writing.
//
//
// Type: boolean
//

convert_stratiform_dbz_to_column_max = FALSE;

///////////// write_debug_fields //////////////////////
//
// Option to write out debug fields.
//
// These are the intermediate fields used for the computation: 
//   'FractionActive', 'DbzTexture', 'ColMaxDbz', 'ConvFromColMax', 
//   'ConvFromTexture'.
//
//
// Type: boolean
//

write_debug_fields = FALSE;

