/**********************************************************************
 * TDRP params for AltCpCompute
 **********************************************************************/

//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
//
// Used for registration with procmap.
//
//
// Type: string
//

instance = "sband";

///////////// register_with_procmap ///////////////////
//
// Option to register with the process mapper.
//
// If true, this application will try to register with procmap once per 
//   minute. (If unable to do so, no error occurs.).
//
//
// Type: boolean
//

register_with_procmap = FALSE;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_mode //////////////////////////////
//
// Input mode - files or time series API.
//
// If TS_FMQ_INPUT, the application will read the time series from a 
//   file message queue and process the pulses as they come in. If 
//   TS_FILE_INPUT, the application will process all the files specified 
//   on the command line.
//
//
// Type: enum
// Options:
//     TS_FILE_INPUT
//     TS_FMQ_INPUT
//

input_mode = TS_FILE_INPUT;

///////////// input_fmq_name //////////////////////////
//
// FMQ name. For TS_FMQ_INPUT only.
//
// Path to FMQ files. There are 2 files, one with a .buf extension and 
//   one with a .stat extention. This path does not include the 
//   extensions.
//
//
// Type: string
//

input_fmq_name = "/tmp/fmq/ts";

///////////// nbeams_per_analysis /////////////////////
//
// Number of beams per stats analysis.
//
// The stats will be computed each time this number of beams is reached. 
//   Set to -1 to analyze all input data.
//
//
// Type: int
//

nbeams_per_analysis = -1;

//======================================================================
//
// COMPUTING MOMENTS.
//
//======================================================================
 
///////////// n_samples ///////////////////////////////
//
// Number of pulse samples in a beam.
//
//
// Type: int
//

n_samples = 256;

///////////// switching_receiver //////////////////////
//
// Does the receiver path switch between each pulse.
//
// In some alternating mode radars, the receiver chain switches between 
//   pulses. This is done to create a co-polar and cross-polar receiver 
//   system which is more stable for ZDR. If this is set to TRUE, then the 
//   receiver is assumed to switch and the data for each channel is 
//   gathered accordingly.
//
//
// Type: boolean
//

switching_receiver = TRUE;

///////////// invert_hv_flag //////////////////////////
//
// Option to invert H/V flag in pulse data.
//
// Normally, the HV flag is set to 1 for H, 0 for V. If the flag in the 
//   data has the opposite sense, set this to true.
//
//
// Type: boolean
//

invert_hv_flag = FALSE;

//======================================================================
//
// CALIBRATION XML PATH.
//
//======================================================================
 
///////////// cal_xml_file_path ///////////////////////
//
// Path for XML calibration file.
//
// At a minimum, the calibration file should contain noiseDbm, 
//   receiverGainDbm, dbz0 and radarConstant values for each channel.
//
//
// Type: string
//

cal_xml_file_path = "$(PROJ_DIR)/mgen/params/sband_cal.xml";

//======================================================================
//
// ANALYSIS DETAILS.
//
//======================================================================
 
///////////// min_snr /////////////////////////////////
//
// Minimum SNR for analysis (dB).
//
// Gates with SNR below this will be ignored.
//
//
// Type: double
//

min_snr = 20;

///////////// max_snr /////////////////////////////////
//
// Maximum SNR for analysis (dB).
//
// Gates with SNR above this will be ignored.
//
//
// Type: double
//

max_snr = 60;

///////////// min_cpa /////////////////////////////////
//
// Minimum CPA.
//
// Can be used to force clutter into analysis. CPA values between 0.9 
//   and 1.0 indicate clutter.
//
//
// Type: double
//

min_cpa = 0.9;

///////////// max_cpa /////////////////////////////////
//
// Maximum CPA.
//
// Can be used to force clutter into analysis. CPA values between 0.9 
//   and 1.0 indicate clutter.
//
//
// Type: double
//

max_cpa = 1;

///////////// min_range ///////////////////////////////
//
// Minimum range for analysis (km).
//
// Ranges less than this will be ignored.
//
//
// Type: double
//

min_range = 2;

///////////// max_range ///////////////////////////////
//
// Maximum range for analysis (km).
//
// Ranges greater than this will be ignored.
//
//
// Type: double
//

max_range = 80;

///////////// min_valid_ratio_db //////////////////////
//
// Minimum valid Vx/Hx ratio (dB).
//
// Sometimes, odd data leads to inappropriate ratios. This puts limits 
//   on the ratios to be used in the analysis.
//
//
// Type: double
//

min_valid_ratio_db = -6;

///////////// max_valid_ratio_db //////////////////////
//
// Maximum valid Vx/Hx ratio (dB).
//
// Sometimes, odd data leads to inappropriate ratios. This puts limits 
//   on the ratios to be used in the analysis.
//
//
// Type: double
//

max_valid_ratio_db = 6;

//======================================================================
//
// OUTPUT RESULTS.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Dir for output files.
//
// The results will be written to sub-directories named from the data 
//   time.
//
//
// Type: string
//

output_dir = "$(DATA_DIR)/cal/zdr/alt";

///////////// write_results ///////////////////////////
//
// Option to write the results to a file.
//
// The file appears in output_dir, and the file name includes the start 
//   time for the analysis.
//
//
// Type: boolean
//

write_results = TRUE;

///////////// results_n_pairs ///////////////////////
//
// Number of pairs for computing results.
//
// We print out results at this frequency.
//
//
// Type: int
//

results_n_pairs = 5000;

///////////// write_data_pairs ////////////////////////
//
// Option to write individual hx/vx data pairs to an output file.
//
// The raw pairs can then be used for generating plots. The file appears 
//   in output_dir, and the file name includes the start time for the 
//   analysis.
//
//
// Type: boolean
//

write_data_pairs = FALSE;

///////////// radar_name //////////////////////////////
//
// Used in file names.
//
//
// Type: string
//

radar_name = "SPOL";

///////////// write_running_results ///////////////////
//
// Write running results to stdout.
//
// If true, we print out the running and global results to stdout.
//
//
// Type: boolean
//

write_running_results = TRUE;

