/**********************************************************************
 * TDRP params for TsCalAuto
 **********************************************************************/

//======================================================================
//
// TsCalAuto analyses radar calibration data.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_NORM;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "spoldrx_1.5us.alt";

///////////// register_with_procmap ///////////////////
//
// Option to register with the process mapper.
// If true, this application will try to register with procmap once per 
//   minute. (If unable to do so, no error occurs.).
// Type: boolean
//

register_with_procmap = FALSE;

//======================================================================
//
// TIME SERIES - INPUT DATA.
//
//======================================================================
 
///////////// input_fmq_path //////////////////////////
//
// Path to time series FMQ.
// Type: string
//

input_fmq_path = "/tmp/fmq/ts";

///////////// n_samples ///////////////////////////////
//
// Number of pulse samples to average for cal data.
// Type: int
//

n_samples = 1000;

///////////// start_gate //////////////////////////////
//
// Gate number for start of averaging.
// Type: int
//

start_gate = 50;

///////////// n_gates /////////////////////////////////
//
// Number of gates for averaging.
// Type: int
//

n_gates = 200;

///////////// fast_alternating_mode ///////////////////
//
// Is the radar running in dual-pol fast alternating mode?.
// If not, set to FALSE.
// Type: boolean
//

fast_alternating_mode = TRUE;

///////////// switching_receivers /////////////////////
//
// Does the system have switching receivers?.
// If the receiver path switched every pulse, i.e. to operate in 
//   co-polar and x-polar mode, set this to true.
// Type: boolean
//

switching_receivers = TRUE;

//======================================================================
//
// SIGNAL GENERATOR CONTROL.
//
//======================================================================
 
///////////// siggen_tcp_port /////////////////////////
//
// TCP port for SIGGEN.
// Type: int
//

siggen_tcp_port = 5025;

///////////// siggen_ip_address ///////////////////////
//
// IP address for SIGGEN.
// Type: string
//

siggen_ip_address = "sig";

///////////// siggen_max_power ////////////////////////
//
// Max power for siggen signal (dBm).
// Type: double
//

siggen_max_power = 0;

///////////// siggen_min_power ////////////////////////
//
// Min power for siggen signal (dBm).
// Type: double
//

siggen_min_power = -130;

///////////// siggen_delta_power //////////////////////
//
// Power step for siggen (dBm).
// Type: double
//

siggen_delta_power = 5;

///////////// set_sig_freq ////////////////////////////
//
// Switch to set the Frequency on the sig gen before starting.
// If the Test Pulse Manager is on, you probably don't want to reset it.
// Type: boolean
//

set_sig_freq = TRUE;

///////////// siggen_frequency ////////////////////////
//
// Siggen frequency (GHz).
// This should match the radar's frequency.
// Type: double
//

siggen_frequency = $(FREQ_GHZ);

///////////// siggen_cmd_delay ////////////////////////
//
// Siggen command delay (msec).
// Delay this ammount after each command to give the siggen time to 
//   stabilize a power change.
// Type: int
//

siggen_cmd_delay = 1000;

///////////// use_manual_siggen_control ///////////////
//
// Option to manually set the siggen.
// Use for testing etc.
// Type: boolean
//

use_manual_siggen_control = FALSE;

///////////// suspend_test_pulse //////////////////////
//
// Option to suspend the test pulse while the calibration is running.
// See TestPulse_pid_file.
// Type: boolean
//

suspend_test_pulse = FALSE;

///////////// TestPulse_pid_file //////////////////////
//
// File containing the process ID of the TestPulse Utility program.
// On Startup, this program suspends the operation of TestPulse by 
//   sending it a SIGUSR1. After Finishing, it restores TestPulse 
//   operation by sending it a SIGUSR2.
// Type: string
//

TestPulse_pid_file = "/tmp/TestPulse.pid";

//======================================================================
//
// CALIBRATION PROCEDURE PARAMETERS.
//
//======================================================================
 
///////////// radarName ///////////////////////////////
//
// Radar name.
// Type: string
//

radarName = "SPOL";

///////////// radar_frequency /////////////////////////
//
// Radar frequency (GHz).
// If this is negative, the siggen_frequency will be used.
// Type: double
//

radar_frequency = $(FREQ_GHZ);

///////////// k_squared ///////////////////////////////
//
// Constant related to complex index of refraction, for water, at this 
//   frequency.
// Suggested values are:
// 	S-band: 0.93
// 	C-band: 0.93
// 	X-band: 0.92
// 	Ku-band: 0.90
// 	Ka-band: 0.88
// 	W-band: 0.84.
// Type: double
//

k_squared = 0.93;

///////////// xmitPowerDbmH ///////////////////////////
//
// Transmitter peak power H (dBm).
// Type: double
//

// xmitPowerDbmH = 87.70; // front 20140628
// xmitPowerDbmH = 87.40; // PECAN 2015/05/21
xmitPowerDbmH = 87.26; // PECAN 2015/05/26

///////////// xmitPowerDbmV ///////////////////////////
//
// Transmitter peak power V (dBm).
// Type: double
//

// xmitPowerDbmV = 87.52; // front 20140628
// xmitPowerDbmV = 87.51; // PECAN 20150521
xmitPowerDbmV = 87.41; // PECAN 2015/05/26

///////////// pulseWidthUs ////////////////////////////
//
// Transmit pulse width (micro_secs).
// Type: double
//

pulseWidthUs = 1.5;

///////////// beamWidthDegH ///////////////////////////
//
// Antenna 3dB beam width H (deg).
// Type: double
//

beamWidthDegH = 0.92;

///////////// beamWidthDegV ///////////////////////////
//
// Antenna 3dB beam width V (deg).
// Type: double
//

beamWidthDegV = 0.92;

///////////// antGainDbH //////////////////////////////
//
// Antenna gain H (dB).
// Type: double
//

// antGainDbH = 45.20;
// antGainDbH = 45.00; // Front 20140418
antGainDbH = 44.95; // PECAN 2015/05/29

///////////// antGainDbV //////////////////////////////
//
// Antenna gain V (dB).
// Type: double
//

// antGainDbV = 45.50;
// antGainDbV = 45.30; // Front 20140418
antGainDbV = 45.32; // PECAN 2015/05/29

///////////// twoWayWaveguideLossDbH //////////////////
//
// 2-way waveguide loss H (dB).
// This is the loss from the measurement plane to the feed-horn and 
//   back. Sometimes it is set to 0 and the loss is incorporated in the 
//   antenna gain.
// Type: double
//

// twoWayWaveguideLossDbH = 1.34;
// twoWayWaveguideLossDbH = 1.10; // Front 20140418
twoWayWaveguideLossDbH = 1.16; // PECAN 2015/05/29

///////////// twoWayWaveguideLossDbV //////////////////
//
// 2-way waveguide loss V (dB).
// This is the loss from the measurement plane to the feed-horn and 
//   back. Sometimes it is set to 0 and the loss is incorporated in the 
//   antenna gain.
// Type: double
//

// twoWayWaveguideLossDbV = 1.54;
// twoWayWaveguideLossDbV = 1.62; // Front 20140418
twoWayWaveguideLossDbV = 1.44; // PECAN 2015/05/29

///////////// twoWayRadomeLossDbH /////////////////////
//
// 2-way loss through the radome - H.
// Set to 0 if no radome.
// Type: double
//

twoWayRadomeLossDbH = 0;

///////////// twoWayRadomeLossDbV /////////////////////
//
// 2-way loss through the radome - V.
// Set to 0 if no radome.
// Type: double
//

twoWayRadomeLossDbV = 0;

///////////// receiverMismatchLossDb //////////////////
//
// Receiver mismatch loss - (dB).
// This is the loss which results from the fact that the receiver 
//   bandwidth is not exactly the same as the pulse width. The calibration 
//   procedure is carries out with a CW signal, so the redeiver bandwidth 
//   is not a factor. However, during operations, the receiver loses some 
//   power because of the bandwidth mismatch. This loss must be taken into 
//   account.
// Type: double
//

// receiverMismatchLossDb = 0.59;
receiverMismatchLossDb = 1.30; // PECAN 2015/05/21

///////////// noiseSourcePowerDbmH ////////////////////
//
// Noise source power - H (dBm).
// Some operational calibrations are computed with a calbrated noise 
//   source of known power.
// Type: double
//

noiseSourcePowerDbmH = -40;

///////////// noiseSourcePowerDbmV ////////////////////
//
// Noise source power - V (dBm).
// Some operational calibrations are computed with a calbrated noise 
//   source of known power.
// Type: double
//

noiseSourcePowerDbmV = -40;

///////////// powerMeasLossDbH ////////////////////////
//
// Power measurement loss - H (dBm).
// This is the power loss from the signal generator to the waveguide 
//   coupler.
// Type: double
//

// powerMeasLossDbH = -21.75;
// powerMeasLossDbH = -20.57; // PECAN 2015/05/21
powerMeasLossDbH = -21.19; // PECAN 2015/05/26

///////////// powerMeasLossDbV ////////////////////////
//
// Power measurement loss - V (dBm).
// This is the power loss from the signal generator to the waveguide 
//   coupler.
// Type: double
//

// powerMeasLossDbV = -21.59;
// powerMeasLossDbV = -20.43; // PECAN 2015/05/21
powerMeasLossDbV = -20.93; // PECAN 2015/05/26

///////////// couplerForwardLossDbH ///////////////////
//
// Coupler loss - H (dB).
// This is the power loss in the directional coupler itself.
// Type: double
//

couplerForwardLossDbH = 36.9;

///////////// couplerForwardLossDbV ///////////////////
//
// Coupler loss - V (dB).
// This is the power loss in the directional coupler itself.
// Type: double
//

couplerForwardLossDbV = 36.7;

///////////// systemPhidpDeg //////////////////////////
//
// System PHIDP (deg).
// This is the approximate PHIDP value in the meteorlogical echo closest 
//   to the radar. Compute PHIDP is corrected using this value, so that 
//   the computed PHIDP closest to the radar is set to a value which 
//   minimizes the chance of folding.
// Type: double
//

systemPhidpDeg = 0;

//======================================================================
//
// ANALYSIS PARAMETERS.
//
//======================================================================
 
///////////// linear_region_min_power /////////////////
//
// power value at lower end of linear region (dBm).
// Type: double
//

linear_region_min_power = -80;

///////////// linear_region_max_power /////////////////
//
// power value at upper end of linear region (dBm).
// Type: double
//

linear_region_max_power = -20;

///////////// noise_region_max_power //////////////////
//
// power value at upper end of noise region (dBm).
// Type: double
//

noise_region_max_power = -120;

///////////// snr_for_mds /////////////////////////////
//
// SNR for minimum detectable signal (dB).
// The minimum detectable signal is generally well below the noise. This 
//   is the SNR value for the MDS.
// Type: double
//

snr_for_mds = -6;

//======================================================================
//
// OUTPUT RESULTS.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Dir for output files.
// The results will be written to sub-directories named from the cal 
//   time.
// Type: string
//

output_dir = "$(PROJ_DIR)/calibration/results/cal.spoldrx.1.5us.alt";

///////////// plot_script /////////////////////////////
//
// If set, program will call script passing the output file names as the 
//   first argument.
// Typically, this script generates a plot and saves the output.
// Type: string
//

plot_script = "do_calplot.dyn_range";

//======================================================================
//
// REPROCESSING OPTIONS.
//
//======================================================================
 
///////////// read_data_in_alt_column_order ///////////
//
// Option to read data file with alternative column order.
// TsCalAuto writes out the power data in the following order: hc, vc, 
//   hx, vx. Some systems, such as the SPOL ATE, writes out the data in 
//   hc, hx, vc, vx. If you set this option to true, the latter column 
//   order will be used to read in previously-stored data.
// Type: boolean
//

read_data_in_alt_column_order = TRUE;

