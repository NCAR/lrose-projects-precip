/**********************************************************************
 * TDRP params for Radx2Dsr
 **********************************************************************/

//======================================================================
//
// Program name: Radx2Dsr.
//
// Radx2Dsr reads radial moments data from Radx-supported files and 
//   writes the data to a DsRadarQueue beam by beam.
//
//======================================================================
 
//======================================================================
//
// PROCESS CONTROL AND DEBUGGING.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "kftg";

///////////// mode ////////////////////////////////////
//
// Operating mode.
// In REALTIME mode, the program waits for a new input file. In ARCHIVE 
//   mode, it moves through the data between the start and end times set 
//   on the command line. In FILELIST mode, it moves through the list of 
//   file names specified on the command line.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     FILELIST
//

mode = ARCHIVE;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Directory for input data.
// This is used in REALTIME and ARCHIVE modes only. In FILELIST mode, 
//   the file paths are specified on the command line.
// Type: string
//

input_dir = "./input";

///////////// max_realtime_valid_age //////////////////
//
// Max age of input data - REALTIME mode.
// For realtime only - max age of input data for it to be valid. If the 
//   input file is older than this, the program waits for new data.
// Minimum val: 0
// Type: int
//

max_realtime_valid_age = 300;

///////////// use_latest_data_info ////////////////////
//
// Option to watch for _latest_data_info file in input dir.
// For realtime only. If true the program watches for the 
//   _latest_data_info file to change. If false, it scans the directory 
//   for new file.
// Type: boolean
//

use_latest_data_info = FALSE;

///////////// latest_file_only ////////////////////////
//
// Option to only process the latest file in the directory.
// For realtime mode only, and only if use_latest_data_info is false, 
//   which implies that the program is scanning the input_dir for new 
//   files. If true, only the latest file will be processed. If false, all 
//   files younger than max_realtime_valid_age will be processed.
// Type: boolean
//

latest_file_only = TRUE;

//======================================================================
//
// READ CONTROL OPTIONS.
//
//======================================================================
 
///////////// aggregate_sweep_files_on_read ///////////
//
// Option to aggregate sweep files into a volume on read.
// If false, and the input data is in sweeps rather than volumes (e.g. 
//   DORADE), the sweep files from a volume will be aggregated into a 
//   volume.
// Type: boolean
//

aggregate_sweep_files_on_read = FALSE;

///////////// read_set_field_names ////////////////////
//
// Option to set field names.
// Type: boolean
//

read_set_field_names = FALSE;

///////////// read_field_names ////////////////////////
//
// Field name list.
// Type: string
// 1D array - variable length.
//

read_field_names = { "DBZ", "VEL" };

///////////// read_set_elevation_limits ///////////////
//
// Option to set elevation limits.
// Only read sweeos within the specified elevation limits.
// Type: boolean
//

read_set_elevation_limits = FALSE;

///////////// read_lower_elevation ////////////////////
//
// Lower elevation limit - degrees.
// Type: double
//

read_lower_elevation = 0;

///////////// read_upper_elevation ////////////////////
//
// Upper elevation limit - degrees.
// Type: double
//

read_upper_elevation = 90;

///////////// read_set_sweep_num_limits ///////////////
//
// Option to set sweep number limits.
// Only read sweeps within the specified sweep number limits.
// Type: boolean
//

read_set_sweep_num_limits = FALSE;

///////////// read_lower_sweep_num ////////////////////
//
// Lower sweep number limit.
// Type: int
//

read_lower_sweep_num = 0;

///////////// read_upper_sweep_num ////////////////////
//
// Upper sweep number limit.
// Type: int
//

read_upper_sweep_num = 0;

///////////// ignore_idle_scan_mode_on_read ///////////
//
// Option to ignore data taken in IDLE mode.
// If true, on read will ignore files with an IDLE scan mode.
// Type: boolean
//

ignore_idle_scan_mode_on_read = TRUE;

///////////// remove_rays_with_all_data_missing ///////
//
// Option to remove rays for which all data is missing.
// If true, ray data will be checked. If all fields have missing data at 
//   all gates, the ray will be removed after reading.
// Type: boolean
//

remove_rays_with_all_data_missing = FALSE;

///////////// set_max_range ///////////////////////////
//
// Option to set the max range for any ray.
// Type: boolean
//

set_max_range = FALSE;

///////////// max_range_km ////////////////////////////
//
// Specified maximim range - km.
// Gates beyond this range are removed.
// Type: double
//

max_range_km = 9999;

///////////// remove_long_range_rays //////////////////
//
// Option to remove long range rays.
// Applies to NEXRAD data. If true, data from the non-Doppler long-range 
//   sweeps will be removed.
// Type: boolean
//

remove_long_range_rays = TRUE;

///////////// remove_short_range_rays /////////////////
//
// Option to remove short range rays.
// Applies to NEXRAD data. If true, data from the Doppler short-range 
//   sweeps will be removed.
// Type: boolean
//

remove_short_range_rays = FALSE;

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// output_url //////////////////////////////
//
// Output URL for DsRadarQueue fmq.
// The URL is of the form 'fmqp:://host::dir/name'. If the output is to 
//   the local host you can use just 'dir/name'.
// Type: string
//

output_url = "$(DATA_DIR)/fmq/kftg";

///////////// data_mapper_report_interval /////////////
//
// Number of seconds between reports to DataMapper.
// If > 0, the program will register with the DataMapper when the output 
//   FMQs are written to. If <= 0, registration will not be performed.
// Type: int
//

data_mapper_report_interval = 5;

///////////// write_blocking //////////////////////////
//
// Option to block on write when the radar queue fills up.
// If false, the program writes data to the output queue without regard 
//   to whether the reader is keeping up. This mode should usually be used 
//   in realtime, to avoid holding things up if a client becomes slow. If 
//   true, the program will not overwrite data in the queue which has not 
//   been read by the reader. This is recommended for ARCHIVE and FILELIST 
//   mode. In this mode there should be only one reader. If you need to 
//   service more than one reader, use Fmq2Fmq in write blocking mode with 
//   multiple output urls to multiplex the queue.
// Type: boolean
//

write_blocking = TRUE;

///////////// write_delay_msecs ///////////////////////
//
// Delay between writing output beams - millisecs.
// Should normally be 0. Can be set to positive values to simulate the 
//   rate at which data would arrive from a radar on a beam-by-beam basis.
// Minimum val: 0
// Type: int
//

write_delay_msecs = 0;

///////////// output_compression //////////////////////
//
// Output compression options.
// The data may be optionally compressed for output. BZIP is generally 
//   the slowest but most compact. ZLIB uses the gzip compression 
//   algorithm, which is faster than BZIP, and for some data more compact 
//   as well. LZO is faster than BZIP and ZLIB, but not as compact. RLE is 
//   simple run-length encoding compression, which is the fastest and 
//   least compact.
//
// Type: enum
// Options:
//     NO_COMPRESSION
//     RLE_COMPRESSION
//     LZO_COMPRESSION
//     ZLIB_COMPRESSION
//     BZIP_COMPRESSION
//

output_compression = NO_COMPRESSION;

///////////// output_n_slots //////////////////////////
//
// Number of slots in output FMQ.
// Type: int
//

output_n_slots = 100;

///////////// output_buf_size /////////////////////////
//
// Size of buffer in output FMQ.
// Type: int
//

output_buf_size = 100000000;

