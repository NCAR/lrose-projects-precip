/**********************************************************************
 * TDRP params for RadarMdvCompare
 **********************************************************************/

//======================================================================
//
// RadarMdvCompare compares MDV data from 2 radars and compares the 
//   values in selected fields.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed with the appropriate level of 
//   detail.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "spol_kftg";

//======================================================================
//
// OPERATIONAL MODE AND TRIGGERING.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operation mode.
// Program may be run in two modes, ARCHIVE and REALTIME.

// In REALTIME mode, the analysis is performed at regular times or as 
//   new data arrives.

// In ARCHIVE mode, the file list is obtained from the command line or a 
//   start and end time are specified.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//

mode = ARCHIVE;

///////////// trigger /////////////////////////////////
//
// Trigger mechanism.

// TIME_TRIGGER: program is triggered at constant time intervals - see 
//   time_trigger_interval.

// FILE_TRIGGER: the program watches the first input_dir and triggers 
//   based on data in that directory.
//
// Type: enum
// Options:
//     TIME_TRIGGER
//     FILE_TRIGGER
//

trigger = FILE_TRIGGER;

///////////// time_trigger_interval ///////////////////
//
// Interval for TIME_TRIGGER - secs.
// For TIME_TRIGGER, this is the interval between trigger events. Time 
//   triggers are synchronized to the hour, and occur at constant 
//   intervals thereafter.
// Type: int
//

time_trigger_interval = 300;

///////////// time_trigger_offset /////////////////////
//
// Time trigger offset - secs.
// Time triggers occur on the hour and at constant intervals thereafter 
//   until the next hour. This parameters allows you to schedule the 
//   trigger to be offset from the anchored time by the specified number 
//   of secs. For example, if you set time_trigger_interval to 600 (10 
//   mins) and time_trigger_offset to 420 (7 minutes), the trigger will 
//   occur at 7, 17, 27, 37, 47 and 57 mins after the hour.
// Type: int
//

time_trigger_offset = 0;

///////////// time_trigger_margin /////////////////////
//
// Max time diff for searching for files relative to the trigger time - 
//   secs.
// When matching files up with the trigger time, the difference between 
//   the trigger time and file time must be less than this margin.
// Type: int
//

time_trigger_margin = 600;

///////////// min_time_between_file_triggers //////////
//
// Minimum time between triggering in REALTIME FILE_TRIGGER mode, in 
//   seconds.
// This prevents the arrival of files in FILE_TRIGGER mode from 
//   triggering at intervals less than this amount.
// Type: int
//

min_time_between_file_triggers = 150;

///////////// max_realtime_valid_age //////////////////
//
// Maximum file age in REALTIME file triggered mode, seconds.
// Applies to all URLs specified.
// Type: int
//

max_realtime_valid_age = 600;

///////////// sleep_after_trigger /////////////////////
//
// Number of seconds to sleep after triggering before processing the 
//   data. The intent is to allow realtime URLs that come in nearly 
//   simultaneously (satellite) to have a chance to catch up.
// Only applies in REALTIME mode.
// Type: int
//

sleep_after_trigger = 0;

//======================================================================
//
// INPUT DATA SPECIFICATIONS.
//
//======================================================================
 
///////////// primary_url /////////////////////////////
//
// URL for primary radar.
// This is the URL from which the trigger is derived.
// Type: string
//

primary_url = "mdvp:://localhost:0:mdv/radarCart/spol";

///////////// primary_field_name //////////////////////
//
// Field name for primary data.
// Only this field will be used for comparison.
// Type: string
//

primary_field_name = "DBZ_F";

///////////// secondary_url ///////////////////////////
//
// URL for secondary radar.
// Data from this url will be compared against the primary.
// Type: string
//

secondary_url = "mdvp:://localhost:0:mdv/radarCart/kftg";

///////////// secondary_field_name ////////////////////
//
// Field name for secondary data.
// Only this field will be used for comparison.
// Type: string
//

secondary_field_name = "REF";

///////////// max_time_diff ///////////////////////////
//
// Maximum time difference, in secs, between the primary and secondary 
//   fields.
// if the time difference exceeds this value, the comparison will not be 
//   performed.
// Type: int
//

max_time_diff = 150;

//======================================================================
//
// GEOMETRIC LIMITS.
//
// Limits for the analysis region.
//
//======================================================================
 
///////////// max_vlevel_diff /////////////////////////
//
// Max difference in vlevels for comparison.
// Type: double
//

max_vlevel_diff = 0.01;

///////////// set_bounding_box ////////////////////////
//
// Option to set bounding box.
// Type: boolean
//

set_bounding_box = TRUE;

///////////// bounding_box ////////////////////////////
//
// Horizontal limits for analysis.
//
// Type: struct
//   typedef struct {
//      double min_lat;
//      double min_lon;
//      double max_lat;
//      double max_lon;
//   }
//
//

bounding_box = { 40.15, -105.23, 40.77, -104.0 };
// bounding_box = { 40.0, -105.2, 41.0, -104.0 };

///////////// request_composite ///////////////////////
//
// Option to request composite.
// This computes the composite of the data in the vertical, which is the 
//   maximum value in the column. If combined with set_vlevel_limits, it 
//   will compute the maximum within the vlevel limits specified.
// Type: boolean
//

request_composite = FALSE;

///////////// set_vlevel_limits ///////////////////////
//
// Option to set vertical limits.
// Type: boolean
//

set_vlevel_limits = TRUE;

///////////// lower_vlevel ////////////////////////////
//
// Lower vlevel limit.
// Type: double
//

lower_vlevel = 2.95;

///////////// upper_vlevel ////////////////////////////
//
// Upper vlevel limit.
// Type: double
//

upper_vlevel = 5.05;

///////////// set_range_limits ////////////////////////
//
// Option to set range limits.
// Type: boolean
//

set_range_limits = TRUE;

///////////// min_range_km ////////////////////////////
//
// Min range from radar in km.
// Type: double
//

min_range_km = 25;

///////////// max_range_km ////////////////////////////
//
// Max range from radar in km.
// Type: double
//

max_range_km = 100;

//======================================================================
//
// COMPARISON DETAILS.
//
//======================================================================
 
///////////// min_value_for_diff //////////////////////
//
// Minimum value for valid comparison.
// The field value for both the primary and secondary radars must exceed 
//   this value for the diff to be computed.
// Type: double
//

min_value_for_diff = 10;

///////////// max_valid_diff //////////////////////////
//
// Maximum valid value for difference.
// If the difference is greater than this, it is ignored.
// Type: double
//

max_valid_diff = 10;

///////////// min_valid_diff //////////////////////////
//
// Minimum valid value for difference.
// If the difference is less than this, it is ignored.
// Type: double
//

min_valid_diff = -10;

///////////// min_number_of_pts_above_threshold ///////
//
// Minimum number of pts with values above threshold.
// In computing the stats, The field value for both the primary and 
//   secondary radars must exceed this value for the diff to be computed.
// Type: int
//

min_number_of_pts_above_threshold = 1000;

///////////// threshold_value_for_min_pts /////////////
//
// Threshold value for checking if stats are valid.
// For the stats to be considered valid, we need at least 
//   min_number_of_pts_above_threshold to exceed this threshold. For 
//   example, we may say we want at least 1000 points to have DBZ values 
//   in excess of 30 DBZ for the stats to be considered valid.
// Type: double
//

threshold_value_for_min_pts = 30;

//======================================================================
//
// MEDIAN.
//
//======================================================================
 
///////////// compute_median //////////////////////////
//
// Option to compute the median of the difference.
// Computing the median is expensive from a CPU point of view. Don't 
//   compute it if not needed.
// Type: boolean
//

compute_median = TRUE;

//======================================================================
//
// OUTPUT OPTIONS.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Directory for output files.
// Files will be named by the date.
// Type: string
//

output_dir = "$(DATA_DIR)/spol_kftg_comparison";

///////////// output_file_prefix //////////////////////
//
// Prefix for files.
// Files will start with this prefix, then the date, and then the 
//   extension.
// Type: string
//

output_file_prefix = "SPOL_minus_KFTG";

///////////// output_file_ext /////////////////////////
//
// Extension for output files.
// File will start with the prefix, then the date, and then this 
//   extension.
// Type: string
//

output_file_ext = "txt";

///////////// write_output_stats //////////////////////
//
// Option to print output stats to stdout.
// The stats summarise the difference between the primary and secondary 
//   data sets.
// Type: boolean
//

write_output_stats = TRUE;

///////////// write_output_table //////////////////////
//
// Option to print output table to stdout.
// Columns will be 'lat lon alt primary secondary diff'. Columns are 
//   space-delimted.
// Type: boolean
//

write_output_table = TRUE;

///////////// append_to_summary_file //////////////////
//
// Option to append to a global summary file.
// Columns will be yyyy mm dd hh mm ss unixsecs unixdays count mean_diff 
//   sdev_diff median_diff. Columns are space-delimted.
// Type: boolean
//

append_to_summary_file = TRUE;

