/**********************************************************************
 * TDRP params for ZdrCalSimHv
 **********************************************************************/

//======================================================================
//
// ZdrCalSimHv computes the cross-polar ratios between H and V returns, 
//   in simulataneous mode. This is used for the cross-polar method of ZDR 
//   calibration, in conjunction with SunScan analysis - see SunCal.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "stationary";

///////////// register_with_procmap ///////////////////
//
// Option to register with the process mapper.
// If true, this application will try to register with procmap once per 
//   minute. (If unable to do so, no error occurs.).
// Type: boolean
//

register_with_procmap = FALSE;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_mode //////////////////////////////
//
// Input mode - files or time series API.
// If TS_FMQ_INPUT, the application will read the time series from a 
//   file message queue and process the pulses as they come in. If 
//   TS_FILE_INPUT, the application will process all the files specified 
//   on the command line.
//
// Type: enum
// Options:
//     TS_FILE_INPUT
//     TS_FMQ_INPUT
//

input_mode = TS_FILE_INPUT;

///////////// input_fmq_name //////////////////////////
//
// FMQ name. For TS_FMQ_INPUT only.
// Path to FMQ files. There are 2 files, one with a .buf extension and 
//   one with a .stat extention. This path does not include the 
//   extensions.
// Type: string
//

input_fmq_name = "/tmp/fmq/ts";

///////////// max_pulse_queue_size ////////////////////
//
// Max size of pulse queue.
// The input queue is trimmed to this size. This keeps memory usage 
//   under control.
// Type: int
//

max_pulse_queue_size = 2048;

///////////// max_data_interval_secs //////////////////
//
// Max time between pulses for valid data (secs).
// If the interval between pulses exceeds this value, the power 
//   accumulation arrays will be reset to 0.
// Type: int
//

max_data_interval_secs = 30;

//======================================================================
//
// ANALYSIS PARAMETERS.
//
//======================================================================
 
///////////// azimuth_resolution //////////////////////
//
// Resolution of the analysis in azimuth (deg).
// The data is analyzed in evenly-spaced azimuth dwells. This is the 
//   angular resolution of the dwells.
// Type: double
//

azimuth_resolution = 1;

///////////// min_samples_per_dwell ///////////////////
//
// Min number of samples in an azimuth resolution.
// Type: int
//

min_samples_per_dwell = 128;

///////////// stationary_mode /////////////////////////
//
// Antenna collects data while stationary.
// In this mode, the power values are averaged for successive H and V 
//   time periods, and the ratios are then computed.
// Type: boolean
//

stationary_mode = TRUE;

///////////// n_samples_stationary_mode ///////////////
//
// Number of samples in a beam, in stationary mode.
// Type: int
//

n_samples_stationary_mode = 128;

//======================================================================
//
// RANGE LIMITS FOR ANALYSIS.
//
//======================================================================
 
///////////// start_range /////////////////////////////
//
// Start range for analysis (km).
// Type: double
//

start_range = 1;

///////////// end_range ///////////////////////////////
//
// End range for analysis (km).
// Type: double
//

end_range = 16;

///////////// gate_spacing ////////////////////////////
//
// Gate spacing for analysis (km).
// Type: double
//

gate_spacing = 0.15;

//======================================================================
//
// AZIMUTH LIMITS FOR ANALYSIS.
//
// Allows you to just analyze a specified sector.
//
//======================================================================
 
///////////// start_az ////////////////////////////////
//
// Start azimuth for analysis (deg).
// Type: double
//

start_az = 0;

///////////// end_az //////////////////////////////////
//
// End azimuth for analysis (deg).
// Type: double
//

end_az = 360;

//======================================================================
//
// CPA LIMITS.
//
// CPA - clutter phase alignment - is a good indicator of clutter.
//
//======================================================================
 
///////////// min_cpa /////////////////////////////////
//
// Minimum CPA for analysis.
// Type: double
//

min_cpa = 0.85;

///////////// max_cpa /////////////////////////////////
//
// Maximum CPA for analysis.
// Type: double
//

max_cpa = 1.1;

//======================================================================
//
// CALIBRATION XML PATH.
//
//======================================================================
 
///////////// cal_xml_file_path ///////////////////////
//
// Path for XML calibration file.
// At a minimum, the calibration file should contain noiseDbm values for 
//   each channel.
// Type: string
//

cal_xml_file_path = "$(PROJ_DIR)/mgen/params/sband_cal.xml";

///////////// get_noise_from_time_series //////////////
//
// Option to read the noise from the time series data stream.
// Some time series formats (e.g. SIGMET tsarchive) includes noise 
//   values. If this parameter is true, the noise is read from the time 
//   series and this overrides the calibration file.
// Type: boolean
//

get_noise_from_time_series = FALSE;

//======================================================================
//
// SNR LIMITS.
//
//======================================================================
 
///////////// min_snr /////////////////////////////////
//
// Minimum SNR for analysis (dB).
// Type: double
//

min_snr = 20;

///////////// max_snr /////////////////////////////////
//
// Maximum SNR for analysis (dB).
// Type: double
//

max_snr = 65;

//======================================================================
//
// DETERMINING H or V transmit.
//
//======================================================================
 
///////////// h_minus_v_threshold /////////////////////
//
// Threshold for determining H or V transmit (dB).
// For each beam, we compute the mean difference between Hc and Vx, or 
//   Hx and Vc, depending on whether we are in H-only or V-only transmit. 
//   If H exceeds V by this threshold, we assume H transmit. If V exceeds 
//   H by this threshold, we assume V transmit. If the absolute difference 
//   is less than or equal to this threshold, we do not use the beam.
// Type: double
//

h_minus_v_threshold = 4.5;

//======================================================================
//
// COMPUTING CROSS-POLAR POWER RATIO.
//
//======================================================================
 
///////////// min_valid_ratio_db //////////////////////
//
// Minimum valid Vx/Hx ratio (dB).
// Sometimes, odd data leads to inappropriate ratios. This puts limits 
//   on the ratios to be used in the analysis.
// Type: double
//

min_valid_ratio_db = -6;

///////////// max_valid_ratio_db //////////////////////
//
// Maximum valid Vx/Hx ratio (dB).
// Sometimes, odd data leads to inappropriate ratios. This puts limits 
//   on the ratios to be used in the analysis.
// Type: double
//

max_valid_ratio_db = 6;

//======================================================================
//
// OVERRIDE RADAR LOCATION.
//
// In cases where location is not stored in the meta data.
//
//======================================================================
 
///////////// override_radar_location /////////////////
//
// Option to override radar location.
// If TRUE, the program will use location specified in the 
//   'radar_location' parameter.
// Type: boolean
//

override_radar_location = FALSE;

///////////// radar_location //////////////////////////
//
// Radar location if override is set true.
// The radar_location is only used if 'override_radar_location' is set 
//   true. Otherwise the information in the input data stream is used. 
//   Note that the altitude is in kilometers, not meters.
//
// Type: struct
//   typedef struct {
//      double latitude;
//      double longitude;
//      double altitude_km;
//   }
//
//

radar_location = { 0, 0, 0 };

//======================================================================
//
// WRITE RESULTS.
//
//======================================================================
 
///////////// output_dir //////////////////////////////
//
// Dir for output files.
// The results will be written to sub-directories named from the data 
//   time.
// Type: string
//

output_dir = "$(DATA_DIR)/cal/zdr/stationary";

///////////// write_results ///////////////////////////
//
// Option to write summary results to files.
// If true, files will be written to output_dir.
// Type: boolean
//

write_results = TRUE;

///////////// write_data_pairs ////////////////////////
//
// Option to write individual hx/vx data pairs to an output file.
// The raw pairs can then be used for generating plots. The file appears 
//   in output_dir, and the file name includes the start time for the 
//   analysis.
// Type: boolean
//

write_data_pairs = TRUE;

///////////// radar_name //////////////////////////////
//
// Used in file names.
// Type: string
//

radar_name = "SPOL";

//======================================================================
//
// WRITE MDV FILES FOR DEBUGGING.
//
//======================================================================
 
///////////// write_mdv_files /////////////////////////
//
// Option to write MDV files for debugging.
// These files contain the mean x-polar powers, and ratio, at each gate.
// Type: boolean
//

write_mdv_files = FALSE;

///////////// mdv_output_dir //////////////////////////
//
// Dir for MDV files.
// See 'write_mdv'.
// Type: string
//

mdv_output_dir = "$(DATA_DIR)/mdv/ZdrCalSimHv";

//======================================================================
//
// TESTING IN ALTERNATING H/V mode.
//
//======================================================================
 
///////////// alternating_hv_mode /////////////////////
//
// Radar operation is alternating H/V mode.
// This is only used for testing. If true, the HV flag in the time 
//   series indicates which transmission path was in use for each pulse.
// Type: boolean
//

alternating_hv_mode = TRUE;

///////////// switching_receiver //////////////////////
//
// Does the receiver path switch between each pulse.
// In some alternating mode radars, the receiver chain switches between 
//   pulses. This is done to create a co-polar and cross-polar receiver 
//   system which is more stable for ZDR. If this is set to TRUE, then the 
//   receiver is assumed to switch and the data for each channel is 
//   gathered accordingly.
// Type: boolean
//

switching_receiver = TRUE;

///////////// also_compute_results_by_gate ////////////
//
// Option to compute the CP ratio on a gate-by-gate basis.
// This is only used for testing with alternating data. If true, it also 
//   computes the ratio as is done by AltCpCompute, so that we can check 
//   the gate-by-gate results against the ppi-by-ppi results.
// Type: boolean
//

also_compute_results_by_gate = TRUE;

///////////// averaging_period_in_stationary_mode /////
//
// Sampling periond in stationary mode (secs).
// Averages will be computed successively in H and V, using this 
//   sampling period.
// Type: double
//

averaging_period_in_stationary_mode = 60;

