/**********************************************************************
 * TDRP params for Rhi2Symprod
 **********************************************************************/

//======================================================================
//
// Rhi2Symprod - converts RHI spdb data to symbolic product.
//
// The RHI azimuths are rendered as tick lines along the direction of 
//   each RHI.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

//======================================================================
//
// PROCESS CONTROL.
//
//======================================================================
 
///////////// instance ////////////////////////////////
//
// Process instance.
// Used for procmap registration and auto restarting.
// Type: string
//

instance = "manager";

///////////// no_threads //////////////////////////////
//
// Option to prevent server from using a thread per client.
// For debugging purposes it it sometimes useful to suppress the use of 
//   threads. Set no_threads to TRUE for this type of debugging.
// Type: boolean
//

no_threads = FALSE;

//======================================================================
//
// Server details for support from ServerMgr.
//
//======================================================================
 
///////////// port ////////////////////////////////////
//
// Port number.
// The server listens on this port for client requests.
// Type: int
//

port = 5473;

///////////// qmax ////////////////////////////////////
//
// Max quiescent period (secs).
// If the server does not receive requests for this time period, it will 
//   die gracefully. If set to -1, the server never exits.
// Type: int
//

qmax = -1;

///////////// max_clients /////////////////////////////
//
// Maximum number of clients.
// This is the maximum number of threads the application will produce to 
//   handle client requests.  If the maximum is reached, new clients will 
//   receive a SERVICE_DENIED error message and will have to request the 
//   data again.  If set to -1, no maximum is enforced.
// Type: int
//

max_clients = 64;

//======================================================================
//
// AZIMUTH TICKS.
//
//======================================================================
 
///////////// tick_color //////////////////////////////
//
// Tick color.
// Name of color suggested for the tick lines along each azimuth.
// Type: string
//

tick_color = "white";

///////////// tick_line_width /////////////////////////
//
// Line thickness of icon lines.
// Thickness in pixels.
// Type: int
//

tick_line_width = 1;

///////////// tick_line_style /////////////////////////
//
// Line style for tick marks.
//
// Type: enum
// Options:
//     LINETYPE_SOLID
//     LINETYPE_DASH
//     LINETYPE_DOT_DASH
//

tick_line_style = LINETYPE_SOLID;

///////////// tick_range //////////////////////////////
//
// Array of tick mark ranges.
// Tick marks will be rendered along the RHI azimuth, between the given 
//   ranges, for each set of range limits.
//
// Type: struct
//   typedef struct {
//      double start_range;
//      double end_range;
//   }
//
// 1D array - variable length.
//

tick_range = {
  { 45, 55},
  { 95, 105},
  { 145, 155},
  { 195, 205},
  { 245, 255}
};

//======================================================================
//
// RADAR ICON.
//
//======================================================================
 
///////////// radar_icon_size /////////////////////////
//
// Size of radar icon in pixels.
// The radar position is represented by a cross. This is the length of 
//   each arm of the cross in pixels.
// Type: int
//

radar_icon_size = 4;

///////////// radar_icon_line_width ///////////////////
//
// Line thickness of radar icon lines.
// Thickness in pixels.
// Type: int
//

radar_icon_line_width = 1;

///////////// radar_icon_color ////////////////////////
//
// Color of radar icon.
// Type: string
//

radar_icon_color = "cyan";

//======================================================================
//
// TIME LABEL.
//
//======================================================================
 
///////////// label_time //////////////////////////////
//
// Option to add a text label representing the time of the RHI data 
//   used.
// The time label will be placed relative to the radar location.
// Type: boolean
//

label_time = FALSE;

///////////// time_format /////////////////////////////
//
// Time label format.
// Only relevant if do_time_labelling is TRUE.
//
// Type: enum
// Options:
//     TIME_LABEL_HHMM
//     TIME_LABEL_HHMMSS
//     TIME_LABEL_YYYYMMDDHHMMSS
//

time_format = TIME_LABEL_HHMMSS;

///////////// time_text_offset ////////////////////////
//
// Pixel offset values for starting the time labelling text.
// Only relevant if do_time_labelling is TRUE.
//
// Type: struct
//   typedef struct {
//      long x;
//      long y;
//   }
//
//

time_text_offset = { 0, 15 };

///////////// time_label_color ////////////////////////
//
// Color for time labels.
// Only relevant if do_time_labelling is TRUE.
// Type: string
//

time_label_color = "cyan";

///////////// time_label_background_color /////////////
//
// Text background color.
// Set to empty string to use display background color.
// Type: string
//

time_label_background_color = "";

///////////// time_label_vert_align ///////////////////
//
// Vertical alignment for the text.
//
// Type: enum
// Options:
//     VERT_ALIGN_TOP
//     VERT_ALIGN_CENTER
//     VERT_ALIGN_BOTTOM
//

time_label_vert_align = VERT_ALIGN_CENTER;

///////////// time_label_horiz_align //////////////////
//
// Horizontal alignment for the text.
//
// Type: enum
// Options:
//     HORIZ_ALIGN_LEFT
//     HORIZ_ALIGN_CENTER
//     HORIZ_ALIGN_RIGHT
//

time_label_horiz_align = HORIZ_ALIGN_CENTER;

///////////// time_label_font_style ///////////////////
//
// Font style for the text.
//
// Type: enum
// Options:
//     TEXT_NORM
//     TEXT_BOLD
//     TEXT_ITALICS
//     TEXT_SUBSCRIPT
//     TEXT_SUPERSCRIPT
//     TEXT_UNDERLINE
//     TEXT_STRIKETHROUGH
//

time_label_font_style = TEXT_NORM;

///////////// time_label_font_size ////////////////////
//
// Size of font to use for text.
// Type: int
//

time_label_font_size = 0;

///////////// time_label_font_name ////////////////////
//
// Font name.
// Type: string
//

time_label_font_name = "";

